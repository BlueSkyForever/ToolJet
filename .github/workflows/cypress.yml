name: Cypress E2E Test

on:
  pull_request_target:
    types: [labeled, unlabeled, closed]

  workflow_dispatch:

env:
  PR_NUMBER: ${{ github.event.number }}
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}


concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.ref }}
  cancel-in-progress: true  

jobs:
  Run-Cypress:
    if: ${{ github.event.action == 'labeled' && (github.event.label.name == 'run-cypress' || github.event.label.name == 'run-cypress-app-builder'|| github.event.label.name == 'run-cypress-workspace')}}

    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Node.js 18.3.0
        uses: actions/setup-node@v3
        with:
          node-version: 18.3.0

      - name: Checking the PR URL
        run: |
          timeout 1500 bash -c '
          until curl --silent --fail https://tooljet-pr-cypress-${{ env.PR_NUMBER }}.onrender.com; do
            sleep 100
          done'

      - name: Create Cypress environment file
        id: create-json
        uses: jsdaniell/create-json@1.1.2
        with:
          name: "cypress.env.json"
          json: ${{ secrets.CYPRESS_SECRETS }}
          dir: './cypress-tests'

      - name: Update "database" value in cypress.env.json
        run: |
          # Set the new value for the "database" field
          new_database_value="${{ env.PR_NUMBER }}_cypress"

          # Read the content of cypress.env.json and update the "database" field using jq
          cat ./cypress-tests/cypress.env.json | jq --arg new_value "$new_database_value" '.app_db.database = $new_value' > tmp_cypress.env.json

          # Move the updated file back to the original location
          mv tmp_cypress.env.json ./cypress-tests/cypress.env.json


      - name: Cypress Integration Test
        id: run-cypress
        if: ${{ github.event.label.name == 'run-cypress' }}
        uses: cypress-io/github-action@v5
        with:
          working-directory: ./cypress-tests
          config: "baseUrl=https://tooljet-pr-cypress-${{ env.PR_NUMBER }}.onrender.com"
          config-file: cypress-run.config.js

      - name: Cypress Integration Test (App Builder)
        id: run-cypress-app-builder
        if: ${{ github.event.label.name == 'run-cypress-app-builder' }}
        uses: cypress-io/github-action@v5
        with:
          working-directory: ./cypress-tests
          config: "baseUrl=https://tooljet-pr-cypress-${{ env.PR_NUMBER }}.onrender.com"
          config-file: cypress-app-builder.config.js

      - name: Cypress Integration Test (Workspace)
        id: run-cypress-workspace
        if: ${{ github.event.label.name == 'run-cypress-workspace' }}
        uses: cypress-io/github-action@v5
        with:
          working-directory: ./cypress-tests
          config: "baseUrl=https://tooljet-pr-cypress-${{ env.PR_NUMBER }}.onrender.com"
          config-file: cypress-workspace.config.js

      - name: Capture Screenshots
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: screenshots
          path: cypress-tests/cypress/screenshots

      # Run Cypress tests and collect the Cypress job ID
      - name: Run Cypress Tests and Collect Job ID
        id: cypress_tests
        run: |
          # Example: Run your Cypress tests here
          npx cypress run --headless --reporter junit
          # Collect the Cypress job ID from the generated test report
          job_id=$(cat ./cypress_test/junit-report.xml | grep -oPm1 "(?<=<testsuite\s*id=)[^/]*" | head -1)
          echo "::set-output name=job_id::$job_id"


  Fetch-Job-Summary:
    runs-on: ubuntu-22.04
    needs: Run-Cypress
    steps:
      - name: Export job URLs
        id: exp
        uses: pl-strflt/export-job-urls@v1

      - name: Run Cypress Tests and Collect Job ID
        id: cypress_tests
        run: |
          # Example: Run your Cypress tests here
          npx cypress run --headless --reporter junit
          # Collect the Cypress job ID from the generated test report
          job_id=$(cat ./cypress/report/junit-report.xml | grep -oPm1 "(?<=<testsuite\s*id=)[^/]*" | head -1)
          echo "::set-output name=job_id::$job_id"

      - name: Fetch Job Summary
        id: fetch_job_summary
        run: |
          job_id=${{ steps.cypress_tests.outputs.job_id }}
          job_summary_url="${{ steps.exp.outputs.job_urls }}/${job_id}/summary_raw"
          curl -L "$job_summary_url" > job_summary.md

      - name: Send Slack Notification
        if: always()
        run: |
          slack_webhook_url="${{ secrets.SLACK_WEBHOOK_QA_URL }}"
          if [[ "${{ job.status }}" == "success" ]]; then
            message="Job succeeded! Here is the summary:"
          else
            message="Job failed! Here is the summary:"
          fi

          # Read the content of the job summary file
          job_summary=$(cat job_summary.md)

          # Prepare the payload for the Slack notification
          payload="{\"text\":\"$message\n$job_summary\"}"

          # Send the notification using curl
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$slack_webhook_url"



